autocmd! AuNERDTreeCmd FocusGained
let NERDSpaceDelims=1
let g:CommandTMatchWindowAtTop = 1

let g:miniBufExplMapWindowNavVim = 1
let g:miniBufExplMapWindowNavArrows = 1
let g:miniBufExplMapCTabSwitchBufs = 1
let g:miniBufExplModSelTarget = 1
nmap <silent> <F2> :NERDTreeToggle<CR>
nmap <silent> <F3> :CtrlP<CR>
let g:CommandTMatchWindowAtTop = 1

colorscheme molokai

highlight NonText guibg=#060606
highlight Folded  guibg=#0A0A0A guifg=#9090D0

" Window navigation
nmap <C-J> <C-W><C-J>
nmap <C-K> <C-W><C-K>

" Tam's custom shortkey
nmap <C-V> "+gP
imap <C-V> <ESC><right><C-V>i
vmap <C-C> "+y
vmap <C-X> "+x

nnoremap <C-s> <Esc>:w<CR>
inoremap <C-s> <Esc>:w<CR>

let g:buftabs_in_statusline=1
let g:buftabs_active_highlight_group="Visual"
map <C-a> ggVG

" Map ; to : and save a million keystrokes
nnoremap ; :

" Move end/begin line (~mac)
noremap <A-left> ^
noremap <A-right> $
inoremap <A-left> <Home>
inoremap <A-right> <End>

noremap <C-Z> <C-R>

" map control-backspace to delete the previous word
imap <C-BS> <C-W>

" Reselect visual block after indent/outdent
vnoremap < <gv
vnoremap > >gv

" NERDCommenter
nmap <C-k> <Leader>c<Space>
vmap <C-k> <Leader>c<Space>
imap <C-k> <Esc><Leader>c<Space>

" Automatically removing all trailing whitespace
" autocmd BufWritePre * :%s/\s\+$//e
fun! <SID>StripTrailingWhitespaces()
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    call cursor(l, c)
endfun
autocmd BufWritePre *.rb :call <SID>StripTrailingWhitespaces()

set fmr={,}
set fdm=marker
set foldlevelstart=99
set smartcase
set antialias
set background=dark
let g:solarized_termcolors=256
set nocompatible
set guioptions-=T
set guifont=Monaco
set antialias
set noswapfile
set nobackup
let g:AutoClosePairs = {'(': ')', '{': '}', '[': ']', '"': '"', "'": "'", '#{': '}', '|':'|' } 
let g:AutoCloseProtectedRegions = ["Character"]

" lets you see what your other options are when Pressing <TAB> in command mode
set wildmenu

" This makes vim act like all other editors, buffers can
" exist in the background without being in a window.
" http://items.sjbach.com/319/configuring-vim-right
set hidden

" Syntastic
let g:syntastic_mode_map = { 'mode': 'passive', 'active_filetypes': ['php', 'rb', 'css', 'scss', 'js', 'coffeescript', 'haml'] }

autocmd User Rails let b:surround_{char2nr('-')} = "<% \r %>" " displays <% %> correctly

" Resize splits like a boss
nnoremap <S-Up> :exe "resize " . (winheight(0) * 11/10)<CR>
nnoremap <S-Down> :exe "resize " . (winheight(0) * 10/11)<CR>
nnoremap <S-Left> :exe "vertical resize " . (winwidth(0) * 10/11)<CR>
nnoremap <S-Right> :exe "vertical resize " . (winwidth(0) * 11/10)<CR>

" Window number: http://stackoverflow.com/questions/6403716/shortcut-for-moving-between-vim-windows
let i = 1
while i <= 9
  execute 'nnoremap <Leader>' . i . ' :' . i . 'wincmd w<CR>'
  let i = i + 1
endwhile

set lazyredraw                " don't redraw when don't have to
set number                    " line numbers
set scrolloff=5                 " keep at least 5 lines around the cursor
set autoindent
